<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7下安装docker和docker-compose</title>
    <url>/2023/11/15/b7caeb428844.html</url>
    <content><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>Docker<blockquote>
<p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows操作系统的机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>
</blockquote>
</li>
<li>Docker-compose<blockquote>
<p>Docker-compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p>
</blockquote>
</li>
</ul>
<p><a href="https://www.runoob.com/w3cnote/yaml-intro.html"> <strong>如果不了解 <code>YML</code></strong> 请点击这里 </a></p>
<p>上面简单介绍了一下相关内容，下面我们着手开始安装Docker与Docker-compose</p>
<h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><ul>
<li>Centos 7</li>
<li>Xshell</li>
<li>root用户</li>
</ul>
<h3 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h3><p>1.更新系统组件</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure></div>
<p>2.安装wget及curl</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget curl</span><br></pre></td></tr></table></figure></div>
<p>3.拉取Docker安装脚本</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">wget -qO- get.docker.com | bash</span><br></pre></td></tr></table></figure></div>
<p>4.下载Docker-compose二进制文件</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>
<p>5.启动Docker及设置开机自启</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker #启动docker</span><br><span class="line">systemctl enable docker #设置开机自启</span><br></pre></td></tr></table></figure></div>
<p>6.赋予Docker-compose可执行权限</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></div>

<p>7.查看docker及docker-compose版本信息</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">docker --version</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></div>
<h3 id="安装成功"><a href="#安装成功" class="headerlink" title="安装成功"></a>安装成功</h3><blockquote>
<p>看到下图则说明已经安装成功</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/2069457946.png"
                      alt="2023-11-14T16:19:39.png"
                ></p>
]]></content>
  </entry>
  <entry>
    <title>Quantumult X下JS签到脚本开发全过程</title>
    <url>/2024/03/20/c471c461c92a.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期刚开始学习JavaScript，恰巧看到 青龙面板&amp;圈X(Quantumult X)定时任务的脚本也是用JS编写，所幸找了一个简单的签到案例分析一下，顺便检验一下自己的近期JS学习成果。</p>
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><blockquote>
<p>以下内容中不含有任何非法修改服务器数据的行为，仅仅是本地用JS代码模拟人类点击的效果完成相关功能。</p>
</blockquote>
<h3 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1.思路分析"></a>1.思路分析</h3><p>在我个人理解来看，所谓的“每日签到”功能，就是当人点击某个按钮后触发了一个事件，而这个事件发起一个对远端服务器的请求，服务器记录下这个请求的时间及相关参数，以此来判定当前用户今日是否已经签到。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images//623038066.png"
                      alt="微信截图_20240320135823.png"
                ></p>
<h3 id="2-开始实施"><a href="#2-开始实施" class="headerlink" title="2.开始实施"></a>2.开始实施</h3><blockquote>
<p>有了以上的思路，我们就可以通过抓包软件，在点击签到的同时抓取发起请求的连接，分析HTTP连接所携带的参数。</p>
</blockquote>
<h4 id="2-1-移动端抓包"><a href="#2-1-移动端抓包" class="headerlink" title="2.1 移动端抓包"></a>2.1 移动端抓包</h4><blockquote>
<p><strong>tips:</strong> 大多数签到请求中，URL中多带有 “check_in”、 “create”、”singin”等字样。</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images//1065721195.jpg"
                      alt="微信图片编辑_20240320142414.jpg"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images//3014617783.png"
                      alt="请求体_20240320143514.png"
                ></p>
<p>通过分析抓取的请求记录，我们可以看到很多相关信息，其中请求头中携带非常见的字段，一般多为重要信息，图中携带了”KUMI-TOKEN”、”PROJECT-ID”、”PLATFORM”三个特殊字段。再查看以下请求体，里面携带了一个json数据，所以我们把它们暂且保留下来，以便于后面的调试使用。</p>
<h4 id="2-2-PC端调试"><a href="#2-2-PC端调试" class="headerlink" title="2.2 PC端调试"></a>2.2 PC端调试</h4><p>1.打开PC端的postman工具，填入我们抓取的请求。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images//127119554.png"
                      alt="jjy_20240320144132.png"
                ><br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images//1421599739.png"
                      alt="jjybody_20240320144321.png"
                ></p>
<p>红色区域为抓取的header字段，Body区域填入抓取到的json数据，填写完毕后，点击send后。</p>
<p>服务器返回的数据如下：</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I1013&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不符合签到日期条件&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p><strong>tips:</strong> 返回这个结果并不是我们抓取的不对，而是抓包的时候我们已经签到过了，通过postman再次发送相当于再签到一次，所以出现“不符合签到日期条件”。</p>
</blockquote>
<p>到这里我们基本上已经搞清楚了整个签到流程，下面我们开始编写我们的JS代码。</p>
<h3 id="3-编写JS脚本"><a href="#3-编写JS脚本" class="headerlink" title="3.编写JS脚本"></a>3.编写JS脚本</h3><blockquote>
<p><strong>tips:</strong> 为了简化开发流程，这里我们引入了 <a class="link"   href="https://github.com/Peng-YM" >@Peng-YM<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 大佬开发的<a class="link"   href="https://github.com/Peng-YM/QuanX/tree/master/Tools/OpenAPI" >OpenAPI<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 跨平台脚本开发API。</p>
</blockquote>
<h4 id="3-1-定义全局变量"><a href="#3-1-定义全局变量" class="headerlink" title="3.1 定义全局变量"></a>3.1 定义全局变量</h4><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="keyword">new</span>  <span class="title function_">API</span>(<span class="string">&quot;JIAJIAYUE签到&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">JJY_TOKEN</span> = <span class="string">&quot;JJY_TOKEN&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Activity</span>_ID = <span class="string">&quot;2402187cvFhAhp9X&quot;</span>; <span class="comment">//这里填写body中的数据</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">KUMI_TOKEN</span> = <span class="string">&quot;&quot;</span>;  <span class="comment">//这里填写抓到的数据</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">PROJECT_ID</span> = <span class="string">&quot;&quot;</span>; <span class="comment">//这里填写抓到的数据</span></span><br><span class="line"><span class="keyword">const</span> json_body = &#123;</span><br><span class="line">    <span class="attr">activityId</span>:<span class="title class_">Activity</span>_ID</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
<h4 id="3-2-引入OpenAPI"><a href="#3-2-引入OpenAPI" class="headerlink" title="3.2 引入OpenAPI"></a>3.2 引入OpenAPI</h4><blockquote>
<p><strong>tips:</strong> OpenAPI代码推荐始终保持在文件的末尾</p>
</blockquote>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// prettier-ignore</span></span><br><span class="line"><span class="comment">/*********************************** API *************************************/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ENV</span>(<span class="params"></span>)&#123;<span class="keyword">const</span> e=<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $task,t=<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $loon,s=<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $httpClient&amp;&amp;!t,i=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $jsbox;<span class="keyword">return</span>&#123;<span class="attr">isQX</span>:e,<span class="attr">isLoon</span>:t,<span class="attr">isSurge</span>:s,<span class="attr">isNode</span>:<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;!i,<span class="attr">isJSBox</span>:i,<span class="attr">isRequest</span>:<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $request,<span class="attr">isScriptable</span>:<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> importModule&#125;&#125;<span class="keyword">function</span> <span class="title function_">HTTP</span>(<span class="params">e=&#123;baseURL:<span class="string">&quot;&quot;</span>&#125;</span>)&#123;<span class="keyword">const</span>&#123;<span class="attr">isQX</span>:t,<span class="attr">isLoon</span>:s,<span class="attr">isSurge</span>:i,<span class="attr">isScriptable</span>:n,<span class="attr">isNode</span>:o&#125;=<span class="title function_">ENV</span>(),r=<span class="regexp">/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]&#123;1,256&#125;\.[a-zA-Z0-9()]&#123;1,6&#125;\b([-a-zA-Z0-9()@:%_\+.~#?&amp;\/\/=]*)/</span>;<span class="keyword">const</span> u=&#123;&#125;;<span class="keyword">return</span>[<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;PUT&quot;</span>,<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;HEAD&quot;</span>,<span class="string">&quot;OPTIONS&quot;</span>,<span class="string">&quot;PATCH&quot;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">l</span>=&gt;</span>u[l.<span class="title function_">toLowerCase</span>()]=(<span class="function"><span class="params">u</span>=&gt;</span>(<span class="keyword">function</span>(<span class="params">u,l</span>)&#123;l=<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> l?&#123;<span class="attr">url</span>:l&#125;:l;<span class="keyword">const</span> h=e.<span class="property">baseURL</span>;h&amp;&amp;!r.<span class="title function_">test</span>(l.<span class="property">url</span>||<span class="string">&quot;&quot;</span>)&amp;&amp;(l.<span class="property">url</span>=h?h+l.<span class="property">url</span>:l.<span class="property">url</span>);<span class="keyword">const</span> a=(l=&#123;...e,...l&#125;).<span class="property">timeout</span>,c=&#123;<span class="attr">onRequest</span>:<span class="function">()=&gt;</span>&#123;&#125;,<span class="attr">onResponse</span>:<span class="function"><span class="params">e</span>=&gt;</span>e,<span class="attr">onTimeout</span>:<span class="function">()=&gt;</span>&#123;&#125;,...l.<span class="property">events</span>&#125;;<span class="keyword">let</span> f,d;<span class="keyword">if</span>(c.<span class="title function_">onRequest</span>(u,l),t)f=$task.<span class="title function_">fetch</span>(&#123;<span class="attr">method</span>:u,...l&#125;);<span class="keyword">else</span> <span class="keyword">if</span>(s||i||o)f=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">e,t</span>)=&gt;</span>&#123;(o?<span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>):$httpClient)[u.<span class="title function_">toLowerCase</span>()](l,<span class="function">(<span class="params">s,i,n</span>)=&gt;</span>&#123;s?<span class="title function_">t</span>(s):<span class="title function_">e</span>(&#123;<span class="attr">statusCode</span>:i.<span class="property">status</span>||i.<span class="property">statusCode</span>,<span class="attr">headers</span>:i.<span class="property">headers</span>,<span class="attr">body</span>:n&#125;)&#125;)&#125;);<span class="keyword">else</span> <span class="keyword">if</span>(n)&#123;<span class="keyword">const</span> e=<span class="keyword">new</span> <span class="title class_">Request</span>(l.<span class="property">url</span>);e.<span class="property">method</span>=u,e.<span class="property">headers</span>=l.<span class="property">headers</span>,e.<span class="property">body</span>=l.<span class="property">body</span>,f=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">t,s</span>)=&gt;</span>&#123;e.<span class="title function_">loadString</span>().<span class="title function_">then</span>(<span class="function"><span class="params">s</span>=&gt;</span>&#123;<span class="title function_">t</span>(&#123;<span class="attr">statusCode</span>:e.<span class="property">response</span>.<span class="property">statusCode</span>,<span class="attr">headers</span>:e.<span class="property">response</span>.<span class="property">headers</span>,<span class="attr">body</span>:s&#125;)&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span>=&gt;</span><span class="title function_">s</span>(e))&#125;)&#125;<span class="keyword">const</span> p=a?<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">e,t</span>)=&gt;</span>&#123;d=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>(c.<span class="title function_">onTimeout</span>(),<span class="title function_">t</span>(<span class="string">`<span class="subst">$&#123;u&#125;</span> URL: <span class="subst">$&#123;l.url&#125;</span> exceeds the timeout <span class="subst">$&#123;a&#125;</span> ms`</span>)),a)&#125;):<span class="literal">null</span>;<span class="keyword">return</span>(p?<span class="title class_">Promise</span>.<span class="title function_">race</span>([p,f]).<span class="title function_">then</span>(<span class="function"><span class="params">e</span>=&gt;</span>(<span class="built_in">clearTimeout</span>(d),e)):f).<span class="title function_">then</span>(<span class="function"><span class="params">e</span>=&gt;</span>c.<span class="title function_">onResponse</span>(e))&#125;)(l,u))),u&#125;<span class="keyword">function</span> <span class="title function_">API</span>(<span class="params">e=<span class="string">&quot;untitled&quot;</span>,t=!<span class="number">1</span></span>)&#123;<span class="keyword">const</span>&#123;<span class="attr">isQX</span>:s,<span class="attr">isLoon</span>:i,<span class="attr">isSurge</span>:n,<span class="attr">isNode</span>:o,<span class="attr">isJSBox</span>:r,<span class="attr">isScriptable</span>:u&#125;=<span class="title function_">ENV</span>();<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">class</span>&#123;<span class="title function_">constructor</span>(<span class="params">e,t</span>)&#123;<span class="variable language_">this</span>.<span class="property">name</span>=e,<span class="variable language_">this</span>.<span class="property">debug</span>=t,<span class="variable language_">this</span>.<span class="property">http</span>=<span class="title function_">HTTP</span>(),<span class="variable language_">this</span>.<span class="property">env</span>=<span class="title function_">ENV</span>(),<span class="variable language_">this</span>.<span class="property">node</span>=(<span class="function">()=&gt;</span>&#123;<span class="keyword">if</span>(o)&#123;<span class="keyword">return</span>&#123;<span class="attr">fs</span>:<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)&#125;&#125;<span class="keyword">return</span> <span class="literal">null</span>&#125;)(),<span class="variable language_">this</span>.<span class="title function_">initCache</span>();<span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delay</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span>(<span class="function">(<span class="params">e,t</span>)=&gt;</span><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;<span class="built_in">setTimeout</span>(s.<span class="title function_">bind</span>(<span class="literal">null</span>,t),e)&#125;))(e,t)&#125;)&#125;&#125;<span class="title function_">initCache</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(s&amp;&amp;(<span class="variable language_">this</span>.<span class="property">cache</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>($prefs.<span class="title function_">valueForKey</span>(<span class="variable language_">this</span>.<span class="property">name</span>)||<span class="string">&quot;&#123;&#125;&quot;</span>)),(i||n)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">cache</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>($persistentStore.<span class="title function_">read</span>(<span class="variable language_">this</span>.<span class="property">name</span>)||<span class="string">&quot;&#123;&#125;&quot;</span>)),o)&#123;<span class="keyword">let</span> e=<span class="string">&quot;root.json&quot;</span>;<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">existsSync</span>(e)||<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(e,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;&#125;),&#123;<span class="attr">flag</span>:<span class="string">&quot;wx&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)),<span class="variable language_">this</span>.<span class="property">root</span>=&#123;&#125;,e=<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.json`</span>,<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">existsSync</span>(e)?<span class="variable language_">this</span>.<span class="property">cache</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">readFileSync</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.json`</span>)):(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(e,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;&#125;),&#123;<span class="attr">flag</span>:<span class="string">&quot;wx&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)),<span class="variable language_">this</span>.<span class="property">cache</span>=&#123;&#125;)&#125;&#125;<span class="title function_">persistCache</span>(<span class="params"></span>)&#123;<span class="keyword">const</span> e=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">cache</span>,<span class="literal">null</span>,<span class="number">2</span>);s&amp;&amp;$prefs.<span class="title function_">setValueForKey</span>(e,<span class="variable language_">this</span>.<span class="property">name</span>),(i||n)&amp;&amp;$persistentStore.<span class="title function_">write</span>(e,<span class="variable language_">this</span>.<span class="property">name</span>),o&amp;&amp;(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.json`</span>,e,&#123;<span class="attr">flag</span>:<span class="string">&quot;w&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)),<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(<span class="string">&quot;root.json&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">root</span>,<span class="literal">null</span>,<span class="number">2</span>),&#123;<span class="attr">flag</span>:<span class="string">&quot;w&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)))&#125;<span class="title function_">write</span>(<span class="params">e,t</span>)&#123;<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`SET <span class="subst">$&#123;t&#125;</span>`</span>),-<span class="number">1</span>!==t.<span class="title function_">indexOf</span>(<span class="string">&quot;#&quot;</span>))&#123;<span class="keyword">if</span>(t=t.<span class="title function_">substr</span>(<span class="number">1</span>),n||i)<span class="keyword">return</span> $persistentStore.<span class="title function_">write</span>(e,t);<span class="keyword">if</span>(s)<span class="keyword">return</span> $prefs.<span class="title function_">setValueForKey</span>(e,t);o&amp;&amp;(<span class="variable language_">this</span>.<span class="property">root</span>[t]=e)&#125;<span class="keyword">else</span> <span class="variable language_">this</span>.<span class="property">cache</span>[t]=e;<span class="variable language_">this</span>.<span class="title function_">persistCache</span>()&#125;<span class="title function_">read</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`READ <span class="subst">$&#123;e&#125;</span>`</span>),-<span class="number">1</span>===e.<span class="title function_">indexOf</span>(<span class="string">&quot;#&quot;</span>)?<span class="variable language_">this</span>.<span class="property">cache</span>[e]:(e=e.<span class="title function_">substr</span>(<span class="number">1</span>),n||i?$persistentStore.<span class="title function_">read</span>(e):s?$prefs.<span class="title function_">valueForKey</span>(e):o?<span class="variable language_">this</span>.<span class="property">root</span>[e]:<span class="keyword">void</span> <span class="number">0</span>)&#125;<span class="title function_">delete</span>(<span class="params">e</span>)&#123;<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`DELETE <span class="subst">$&#123;e&#125;</span>`</span>),-<span class="number">1</span>!==e.<span class="title function_">indexOf</span>(<span class="string">&quot;#&quot;</span>))&#123;<span class="keyword">if</span>(e=e.<span class="title function_">substr</span>(<span class="number">1</span>),n||i)<span class="keyword">return</span> $persistentStore.<span class="title function_">write</span>(<span class="literal">null</span>,e);<span class="keyword">if</span>(s)<span class="keyword">return</span> $prefs.<span class="title function_">removeValueForKey</span>(e);o&amp;&amp;<span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">root</span>[e]&#125;<span class="keyword">else</span> <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">cache</span>[e];<span class="variable language_">this</span>.<span class="title function_">persistCache</span>()&#125;<span class="title function_">notify</span>(<span class="params">e,t=<span class="string">&quot;&quot;</span>,l=<span class="string">&quot;&quot;</span>,h=&#123;&#125;</span>)&#123;<span class="keyword">const</span> a=h[<span class="string">&quot;open-url&quot;</span>],c=h[<span class="string">&quot;media-url&quot;</span>];<span class="keyword">if</span>(s&amp;&amp;$notify(e,t,l,h),n&amp;&amp;$notification.<span class="title function_">post</span>(e,t,l+<span class="string">`<span class="subst">$&#123;c?<span class="string">&quot;\n多媒体:&quot;</span>+c:<span class="string">&quot;&quot;</span>&#125;</span>`</span>,&#123;<span class="attr">url</span>:a&#125;),i)&#123;<span class="keyword">let</span> s=&#123;&#125;;a&amp;&amp;(s.<span class="property">openUrl</span>=a),c&amp;&amp;(s.<span class="property">mediaUrl</span>=c),<span class="string">&quot;&#123;&#125;&quot;</span>===<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(s)?$notification.<span class="title function_">post</span>(e,t,l):$notification.<span class="title function_">post</span>(e,t,l,s)&#125;<span class="keyword">if</span>(o||u)&#123;<span class="keyword">const</span> s=l+(a?<span class="string">`\n点击跳转: <span class="subst">$&#123;a&#125;</span>`</span>:<span class="string">&quot;&quot;</span>)+(c?<span class="string">`\n多媒体: <span class="subst">$&#123;c&#125;</span>`</span>:<span class="string">&quot;&quot;</span>);<span class="keyword">if</span>(r)&#123;<span class="built_in">require</span>(<span class="string">&quot;push&quot;</span>).<span class="title function_">schedule</span>(&#123;<span class="attr">title</span>:e,<span class="attr">body</span>:(t?t+<span class="string">&quot;\n&quot;</span>:<span class="string">&quot;&quot;</span>)+s&#125;)&#125;<span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;e&#125;</span>\n<span class="subst">$&#123;t&#125;</span>\n<span class="subst">$&#123;s&#125;</span>\n\n`</span>)&#125;&#125;<span class="title function_">log</span>(<span class="params">e</span>)&#123;<span class="variable language_">this</span>.<span class="property">debug</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>] LOG: <span class="subst">$&#123;<span class="variable language_">this</span>.stringify(e)&#125;</span>`</span>)&#125;<span class="title function_">info</span>(<span class="params">e</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>] INFO: <span class="subst">$&#123;<span class="variable language_">this</span>.stringify(e)&#125;</span>`</span>)&#125;<span class="title function_">error</span>(<span class="params">e</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>] ERROR: <span class="subst">$&#123;<span class="variable language_">this</span>.stringify(e)&#125;</span>`</span>)&#125;<span class="title function_">wait</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">t</span>=&gt;</span><span class="built_in">setTimeout</span>(t,e))&#125;<span class="title function_">done</span>(<span class="params">e=&#123;&#125;</span>)&#123;s||i||n?$done(e):o&amp;&amp;!r&amp;&amp;<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $context&amp;&amp;($context.<span class="property">headers</span>=e.<span class="property">headers</span>,$context.<span class="property">statusCode</span>=e.<span class="property">statusCode</span>,$context.<span class="property">body</span>=e.<span class="property">body</span>)&#125;<span class="title function_">stringify</span>(<span class="params">e</span>)&#123;<span class="keyword">if</span>(<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> e||e <span class="keyword">instanceof</span> <span class="title class_">String</span>)<span class="keyword">return</span> e;<span class="keyword">try</span>&#123;<span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e,<span class="literal">null</span>,<span class="number">2</span>)&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span><span class="string">&quot;[object Object]&quot;</span>&#125;&#125;&#125;(e,t)&#125;</span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="3-3-编写签到函数"><a href="#3-3-编写签到函数" class="headerlink" title="3.3 编写签到函数"></a>3.3 编写签到函数</h4><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">check_in</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> params = $.<span class="title function_">read</span>( <span class="variable constant_">JJY_TOKEN</span>).<span class="title function_">split</span>(<span class="string">&#x27;@&#x27;</span>);  <span class="comment">//圈X环境下读取存储的TOKEN</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params));</span><br><span class="line">    <span class="variable constant_">KUMI_TOKEN</span> = params[<span class="number">0</span>];</span><br><span class="line">    <span class="variable constant_">PROJECT_ID</span> = params[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> req = &#123; <span class="comment">//构造请求</span></span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;https://mole-mmp-scrm.jiajiayue.com/boss/boss/signin/record/create&quot;</span>,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;KUMI-TOKEN&quot;</span>:<span class="variable constant_">KUMI_TOKEN</span>,</span><br><span class="line">            <span class="string">&quot;PROJECT-ID&quot;</span>:<span class="variable constant_">PROJECT_ID</span>,</span><br><span class="line">            <span class="string">&quot;PLATFORM&quot;</span>:<span class="string">&quot;JIAJIAYUE&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json_body)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> $.http.<span class="title function_">post</span>(req).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span>&#123; <span class="comment">//发起一个异步post请求</span></span><br><span class="line">              <span class="keyword">let</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(resp.<span class="property">body</span>); <span class="comment">//解析返回数据结果</span></span><br><span class="line">              <span class="keyword">if</span>(body.<span class="property">code</span> == <span class="string">&quot;I1013&quot;</span>)&#123; <span class="comment">//参考调试过程中服务器返回的json数据</span></span><br><span class="line">                  $.<span class="title function_">log</span>(body.<span class="property">message</span>);</span><br><span class="line">                  $.<span class="title function_">notify</span>(<span class="string">&quot;&quot;</span>, <span class="string">`<span class="subst">$&#123;$.name&#125;</span>失败❌重复签到`</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span>(body.<span class="property">code</span> == <span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">                  <span class="keyword">let</span> data = body.<span class="property">data</span>;</span><br><span class="line">                  <span class="keyword">if</span>(data.<span class="property">continueNumber</span> == <span class="number">7</span> || data.<span class="property">continueNumber</span> == <span class="number">15</span>)&#123; <span class="comment">//活动是每签到7天或15天可以免费抽奖一次</span></span><br><span class="line">                      $.<span class="title function_">notify</span>(<span class="string">`<span class="subst">$&#123;$.name&#125;</span>签到成功🎉 `</span>, <span class="string">&quot;今天可以去小程序抽奖&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                      $.<span class="title function_">notify</span>(<span class="string">`<span class="subst">$&#123;$.name&#125;</span>签到成功🎉 `</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  $.<span class="title function_">notify</span>(<span class="string">`<span class="subst">$&#123;$.name&#125;</span>未知的错误 `</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(error)&#123; <span class="comment">//如果请求过程出错则打印错误信息</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="3-4-编写Quantumult-X-下获取token函数"><a href="#3-4-编写Quantumult-X-下获取token函数" class="headerlink" title="3.4 编写Quantumult X 下获取token函数"></a>3.4 编写Quantumult X 下获取token函数</h4><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getToken</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> kt = $request.<span class="property">headers</span>[<span class="string">&#x27;KUMI-TOKEN&#x27;</span>]; <span class="comment">//读取请求头中的KUMI-TOKEN</span></span><br><span class="line">    <span class="keyword">let</span> pi = $request.<span class="property">headers</span>[<span class="string">&#x27;PROJECT-ID&#x27;</span>]; <span class="comment">//读取请求头中的PROJECT-ID</span></span><br><span class="line">    <span class="keyword">if</span>((kt != <span class="string">&quot;&quot;</span>) &amp;&amp; (pi!= <span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">let</span> token = kt +<span class="string">&quot;@&quot;</span>+ pi; <span class="comment">//用@拼接两个值</span></span><br><span class="line">        $.<span class="title function_">write</span>(token, <span class="variable constant_">JJY_TOKEN</span>); <span class="comment">//写入持久化存储</span></span><br><span class="line">        <span class="keyword">if</span>($.<span class="title function_">read</span>(<span class="variable constant_">JJY_TOKEN</span>))&#123;</span><br><span class="line">            $.<span class="title function_">notify</span>(<span class="string">&quot;家家悦Token获取成功~🎉&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="3-5-统一调用"><a href="#3-5-统一调用" class="headerlink" title="3.5 统一调用"></a>3.5 统一调用</h4><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (isGetCookie = <span class="keyword">typeof</span> $request !== <span class="string">`undefined`</span>) &#123; </span><br><span class="line">    <span class="title function_">getToken</span>(); <span class="comment">//获取token</span></span><br><span class="line">    $.<span class="title function_">done</span>(); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    !(<span class="title function_">async</span>()=&gt;&#123; </span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">check_in</span>(); <span class="comment">//执行签到</span></span><br><span class="line">        $.<span class="title function_">done</span>();</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="3-6-完整代码"><a href="#3-6-完整代码" class="headerlink" title="3.6 完整代码"></a>3.6 完整代码</h4><div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> -------------- Quantumult X 配置 --------------</span></span><br><span class="line"><span class="comment">[MITM]</span></span><br><span class="line"><span class="comment">hostname = mole-mmp-scrm.jiajiayue.com</span></span><br><span class="line"><span class="comment">* 家家悦微信小程序</span></span><br><span class="line"><span class="comment">* 3月份签到活动</span></span><br><span class="line"><span class="comment">* 功能：自动签到</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 获取CK： 家家悦小程序 -&gt; 3月份签到</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">[rewrite_local]</span></span><br><span class="line"><span class="comment">^https:\/\/mole-mmp-scrm\.jiajiayue\.com\/boss\/boss\/signin\/record\/list url script-request-header https://raw.githubusercontent.com/tidik/quanx/master/script/jjy.js</span></span><br><span class="line"><span class="comment">[task_local]</span></span><br><span class="line"><span class="comment">30 8 * * * https://raw.githubusercontent.com/tidik/quanx/master/script/jjy.js, tag=家家悦签到,enabled=true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> $ = <span class="keyword">new</span>  <span class="title function_">API</span>(<span class="string">&quot;家家悦签到&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">JJY_TOKEN</span> = <span class="string">&quot;JJY_TOKEN&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Activity</span>_ID = <span class="string">&quot;2402187cvFhAhp9X&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">KUMI_TOKEN</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">PROJECT_ID</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> json_body = &#123;</span><br><span class="line">    <span class="attr">activityId</span>:<span class="title class_">Activity</span>_ID</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">check_in</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> params = $.<span class="title function_">read</span>( <span class="variable constant_">JJY_TOKEN</span>).<span class="title function_">split</span>(<span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(params));</span><br><span class="line">    <span class="variable constant_">KUMI_TOKEN</span> = params[<span class="number">0</span>];</span><br><span class="line">    <span class="variable constant_">PROJECT_ID</span> = params[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> req = &#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;https://mole-mmp-scrm.jiajiayue.com/boss/boss/signin/record/create&quot;</span>,</span><br><span class="line">        <span class="attr">headers</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;KUMI-TOKEN&quot;</span>:<span class="variable constant_">KUMI_TOKEN</span>,</span><br><span class="line">            <span class="string">&quot;PROJECT-ID&quot;</span>:<span class="variable constant_">PROJECT_ID</span>,</span><br><span class="line">            <span class="string">&quot;PLATFORM&quot;</span>:<span class="string">&quot;JIAJIAYUE&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">body</span>:<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json_body)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> $.http.<span class="title function_">post</span>(req).<span class="title function_">then</span>(<span class="function">(<span class="params">resp</span>) =&gt;</span>&#123;</span><br><span class="line">              <span class="keyword">let</span> body = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(resp.<span class="property">body</span>);</span><br><span class="line">              <span class="keyword">if</span>(body.<span class="property">code</span> == <span class="string">&quot;I1013&quot;</span>)&#123;</span><br><span class="line">                  $.<span class="title function_">log</span>(body.<span class="property">message</span>);</span><br><span class="line">                  $.<span class="title function_">notify</span>(<span class="string">&quot;&quot;</span>, <span class="string">`<span class="subst">$&#123;$.name&#125;</span>失败❌重复签到`</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span>(body.<span class="property">code</span> == <span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">                  <span class="keyword">let</span> data = body.<span class="property">data</span>;</span><br><span class="line">                  <span class="keyword">if</span>(data.<span class="property">continueNumber</span> == <span class="number">7</span> || data.<span class="property">continueNumber</span> == <span class="number">15</span>)&#123;</span><br><span class="line">                      $.<span class="title function_">notify</span>(<span class="string">`<span class="subst">$&#123;$.name&#125;</span>签到成功🎉 `</span>, <span class="string">&quot;今天可以去小程序抽奖&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                      $.<span class="title function_">notify</span>(<span class="string">`<span class="subst">$&#123;$.name&#125;</span>签到成功🎉 `</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  $.<span class="title function_">notify</span>(<span class="string">`<span class="subst">$&#123;$.name&#125;</span>未知的错误 `</span>, <span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getToken</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> kt = $request.<span class="property">headers</span>[<span class="string">&#x27;KUMI-TOKEN&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> pi = $request.<span class="property">headers</span>[<span class="string">&#x27;PROJECT-ID&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>((kt != <span class="string">&quot;&quot;</span>) &amp;&amp; (pi!= <span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">let</span> token = kt +<span class="string">&quot;@&quot;</span>+ pi;</span><br><span class="line">        $.<span class="title function_">write</span>(token, <span class="variable constant_">JJY_TOKEN</span>);</span><br><span class="line">        <span class="keyword">if</span>($.<span class="title function_">read</span>(<span class="variable constant_">JJY_TOKEN</span>))&#123;</span><br><span class="line">            $.<span class="title function_">notify</span>(<span class="string">&quot;家家悦Token获取成功~🎉&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isGetCookie = <span class="keyword">typeof</span> $request !== <span class="string">`undefined`</span>) &#123;</span><br><span class="line">    <span class="title function_">getToken</span>();</span><br><span class="line">    $.<span class="title function_">done</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    !(<span class="title function_">async</span>()=&gt;&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">check_in</span>();</span><br><span class="line">        $.<span class="title function_">done</span>();</span><br><span class="line">    &#125;)();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// prettier-ignore</span></span><br><span class="line"><span class="comment">/*********************************** API *************************************/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ENV</span>(<span class="params"></span>)&#123;<span class="keyword">const</span> e=<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $task,t=<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $loon,s=<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $httpClient&amp;&amp;!t,i=<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $jsbox;<span class="keyword">return</span>&#123;<span class="attr">isQX</span>:e,<span class="attr">isLoon</span>:t,<span class="attr">isSurge</span>:s,<span class="attr">isNode</span>:<span class="string">&quot;function&quot;</span>==<span class="keyword">typeof</span> <span class="built_in">require</span>&amp;&amp;!i,<span class="attr">isJSBox</span>:i,<span class="attr">isRequest</span>:<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $request,<span class="attr">isScriptable</span>:<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> importModule&#125;&#125;<span class="keyword">function</span> <span class="title function_">HTTP</span>(<span class="params">e=&#123;baseURL:<span class="string">&quot;&quot;</span>&#125;</span>)&#123;<span class="keyword">const</span>&#123;<span class="attr">isQX</span>:t,<span class="attr">isLoon</span>:s,<span class="attr">isSurge</span>:i,<span class="attr">isScriptable</span>:n,<span class="attr">isNode</span>:o&#125;=<span class="title function_">ENV</span>(),r=<span class="regexp">/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]&#123;1,256&#125;\.[a-zA-Z0-9()]&#123;1,6&#125;\b([-a-zA-Z0-9()@:%_\+.~#?&amp;\/\/=]*)/</span>;<span class="keyword">const</span> u=&#123;&#125;;<span class="keyword">return</span>[<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;PUT&quot;</span>,<span class="string">&quot;DELETE&quot;</span>,<span class="string">&quot;HEAD&quot;</span>,<span class="string">&quot;OPTIONS&quot;</span>,<span class="string">&quot;PATCH&quot;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">l</span>=&gt;</span>u[l.<span class="title function_">toLowerCase</span>()]=(<span class="function"><span class="params">u</span>=&gt;</span>(<span class="keyword">function</span>(<span class="params">u,l</span>)&#123;l=<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> l?&#123;<span class="attr">url</span>:l&#125;:l;<span class="keyword">const</span> h=e.<span class="property">baseURL</span>;h&amp;&amp;!r.<span class="title function_">test</span>(l.<span class="property">url</span>||<span class="string">&quot;&quot;</span>)&amp;&amp;(l.<span class="property">url</span>=h?h+l.<span class="property">url</span>:l.<span class="property">url</span>);<span class="keyword">const</span> a=(l=&#123;...e,...l&#125;).<span class="property">timeout</span>,c=&#123;<span class="attr">onRequest</span>:<span class="function">()=&gt;</span>&#123;&#125;,<span class="attr">onResponse</span>:<span class="function"><span class="params">e</span>=&gt;</span>e,<span class="attr">onTimeout</span>:<span class="function">()=&gt;</span>&#123;&#125;,...l.<span class="property">events</span>&#125;;<span class="keyword">let</span> f,d;<span class="keyword">if</span>(c.<span class="title function_">onRequest</span>(u,l),t)f=$task.<span class="title function_">fetch</span>(&#123;<span class="attr">method</span>:u,...l&#125;);<span class="keyword">else</span> <span class="keyword">if</span>(s||i||o)f=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">e,t</span>)=&gt;</span>&#123;(o?<span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>):$httpClient)[u.<span class="title function_">toLowerCase</span>()](l,<span class="function">(<span class="params">s,i,n</span>)=&gt;</span>&#123;s?<span class="title function_">t</span>(s):<span class="title function_">e</span>(&#123;<span class="attr">statusCode</span>:i.<span class="property">status</span>||i.<span class="property">statusCode</span>,<span class="attr">headers</span>:i.<span class="property">headers</span>,<span class="attr">body</span>:n&#125;)&#125;)&#125;);<span class="keyword">else</span> <span class="keyword">if</span>(n)&#123;<span class="keyword">const</span> e=<span class="keyword">new</span> <span class="title class_">Request</span>(l.<span class="property">url</span>);e.<span class="property">method</span>=u,e.<span class="property">headers</span>=l.<span class="property">headers</span>,e.<span class="property">body</span>=l.<span class="property">body</span>,f=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">t,s</span>)=&gt;</span>&#123;e.<span class="title function_">loadString</span>().<span class="title function_">then</span>(<span class="function"><span class="params">s</span>=&gt;</span>&#123;<span class="title function_">t</span>(&#123;<span class="attr">statusCode</span>:e.<span class="property">response</span>.<span class="property">statusCode</span>,<span class="attr">headers</span>:e.<span class="property">response</span>.<span class="property">headers</span>,<span class="attr">body</span>:s&#125;)&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">e</span>=&gt;</span><span class="title function_">s</span>(e))&#125;)&#125;<span class="keyword">const</span> p=a?<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">e,t</span>)=&gt;</span>&#123;d=<span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>(c.<span class="title function_">onTimeout</span>(),<span class="title function_">t</span>(<span class="string">`<span class="subst">$&#123;u&#125;</span> URL: <span class="subst">$&#123;l.url&#125;</span> exceeds the timeout <span class="subst">$&#123;a&#125;</span> ms`</span>)),a)&#125;):<span class="literal">null</span>;<span class="keyword">return</span>(p?<span class="title class_">Promise</span>.<span class="title function_">race</span>([p,f]).<span class="title function_">then</span>(<span class="function"><span class="params">e</span>=&gt;</span>(<span class="built_in">clearTimeout</span>(d),e)):f).<span class="title function_">then</span>(<span class="function"><span class="params">e</span>=&gt;</span>c.<span class="title function_">onResponse</span>(e))&#125;)(l,u))),u&#125;<span class="keyword">function</span> <span class="title function_">API</span>(<span class="params">e=<span class="string">&quot;untitled&quot;</span>,t=!<span class="number">1</span></span>)&#123;<span class="keyword">const</span>&#123;<span class="attr">isQX</span>:s,<span class="attr">isLoon</span>:i,<span class="attr">isSurge</span>:n,<span class="attr">isNode</span>:o,<span class="attr">isJSBox</span>:r,<span class="attr">isScriptable</span>:u&#125;=<span class="title function_">ENV</span>();<span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">class</span>&#123;<span class="title function_">constructor</span>(<span class="params">e,t</span>)&#123;<span class="variable language_">this</span>.<span class="property">name</span>=e,<span class="variable language_">this</span>.<span class="property">debug</span>=t,<span class="variable language_">this</span>.<span class="property">http</span>=<span class="title function_">HTTP</span>(),<span class="variable language_">this</span>.<span class="property">env</span>=<span class="title function_">ENV</span>(),<span class="variable language_">this</span>.<span class="property">node</span>=(<span class="function">()=&gt;</span>&#123;<span class="keyword">if</span>(o)&#123;<span class="keyword">return</span>&#123;<span class="attr">fs</span>:<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)&#125;&#125;<span class="keyword">return</span> <span class="literal">null</span>&#125;)(),<span class="variable language_">this</span>.<span class="title function_">initCache</span>();<span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delay</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span>(<span class="function">(<span class="params">e,t</span>)=&gt;</span><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">s</span>)&#123;<span class="built_in">setTimeout</span>(s.<span class="title function_">bind</span>(<span class="literal">null</span>,t),e)&#125;))(e,t)&#125;)&#125;&#125;<span class="title function_">initCache</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(s&amp;&amp;(<span class="variable language_">this</span>.<span class="property">cache</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>($prefs.<span class="title function_">valueForKey</span>(<span class="variable language_">this</span>.<span class="property">name</span>)||<span class="string">&quot;&#123;&#125;&quot;</span>)),(i||n)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">cache</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>($persistentStore.<span class="title function_">read</span>(<span class="variable language_">this</span>.<span class="property">name</span>)||<span class="string">&quot;&#123;&#125;&quot;</span>)),o)&#123;<span class="keyword">let</span> e=<span class="string">&quot;root.json&quot;</span>;<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">existsSync</span>(e)||<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(e,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;&#125;),&#123;<span class="attr">flag</span>:<span class="string">&quot;wx&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)),<span class="variable language_">this</span>.<span class="property">root</span>=&#123;&#125;,e=<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.json`</span>,<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">existsSync</span>(e)?<span class="variable language_">this</span>.<span class="property">cache</span>=<span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">readFileSync</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.json`</span>)):(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(e,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;&#125;),&#123;<span class="attr">flag</span>:<span class="string">&quot;wx&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)),<span class="variable language_">this</span>.<span class="property">cache</span>=&#123;&#125;)&#125;&#125;<span class="title function_">persistCache</span>(<span class="params"></span>)&#123;<span class="keyword">const</span> e=<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">cache</span>,<span class="literal">null</span>,<span class="number">2</span>);s&amp;&amp;$prefs.<span class="title function_">setValueForKey</span>(e,<span class="variable language_">this</span>.<span class="property">name</span>),(i||n)&amp;&amp;$persistentStore.<span class="title function_">write</span>(e,<span class="variable language_">this</span>.<span class="property">name</span>),o&amp;&amp;(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>.json`</span>,e,&#123;<span class="attr">flag</span>:<span class="string">&quot;w&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)),<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">fs</span>.<span class="title function_">writeFileSync</span>(<span class="string">&quot;root.json&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">root</span>,<span class="literal">null</span>,<span class="number">2</span>),&#123;<span class="attr">flag</span>:<span class="string">&quot;w&quot;</span>&#125;,<span class="function"><span class="params">e</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(e)))&#125;<span class="title function_">write</span>(<span class="params">e,t</span>)&#123;<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`SET <span class="subst">$&#123;t&#125;</span>`</span>),-<span class="number">1</span>!==t.<span class="title function_">indexOf</span>(<span class="string">&quot;#&quot;</span>))&#123;<span class="keyword">if</span>(t=t.<span class="title function_">substr</span>(<span class="number">1</span>),n||i)<span class="keyword">return</span> $persistentStore.<span class="title function_">write</span>(e,t);<span class="keyword">if</span>(s)<span class="keyword">return</span> $prefs.<span class="title function_">setValueForKey</span>(e,t);o&amp;&amp;(<span class="variable language_">this</span>.<span class="property">root</span>[t]=e)&#125;<span class="keyword">else</span> <span class="variable language_">this</span>.<span class="property">cache</span>[t]=e;<span class="variable language_">this</span>.<span class="title function_">persistCache</span>()&#125;<span class="title function_">read</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`READ <span class="subst">$&#123;e&#125;</span>`</span>),-<span class="number">1</span>===e.<span class="title function_">indexOf</span>(<span class="string">&quot;#&quot;</span>)?<span class="variable language_">this</span>.<span class="property">cache</span>[e]:(e=e.<span class="title function_">substr</span>(<span class="number">1</span>),n||i?$persistentStore.<span class="title function_">read</span>(e):s?$prefs.<span class="title function_">valueForKey</span>(e):o?<span class="variable language_">this</span>.<span class="property">root</span>[e]:<span class="keyword">void</span> <span class="number">0</span>)&#125;<span class="title function_">delete</span>(<span class="params">e</span>)&#123;<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">log</span>(<span class="string">`DELETE <span class="subst">$&#123;e&#125;</span>`</span>),-<span class="number">1</span>!==e.<span class="title function_">indexOf</span>(<span class="string">&quot;#&quot;</span>))&#123;<span class="keyword">if</span>(e=e.<span class="title function_">substr</span>(<span class="number">1</span>),n||i)<span class="keyword">return</span> $persistentStore.<span class="title function_">write</span>(<span class="literal">null</span>,e);<span class="keyword">if</span>(s)<span class="keyword">return</span> $prefs.<span class="title function_">removeValueForKey</span>(e);o&amp;&amp;<span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">root</span>[e]&#125;<span class="keyword">else</span> <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">cache</span>[e];<span class="variable language_">this</span>.<span class="title function_">persistCache</span>()&#125;<span class="title function_">notify</span>(<span class="params">e,t=<span class="string">&quot;&quot;</span>,l=<span class="string">&quot;&quot;</span>,h=&#123;&#125;</span>)&#123;<span class="keyword">const</span> a=h[<span class="string">&quot;open-url&quot;</span>],c=h[<span class="string">&quot;media-url&quot;</span>];<span class="keyword">if</span>(s&amp;&amp;$notify(e,t,l,h),n&amp;&amp;$notification.<span class="title function_">post</span>(e,t,l+<span class="string">`<span class="subst">$&#123;c?<span class="string">&quot;\n多媒体:&quot;</span>+c:<span class="string">&quot;&quot;</span>&#125;</span>`</span>,&#123;<span class="attr">url</span>:a&#125;),i)&#123;<span class="keyword">let</span> s=&#123;&#125;;a&amp;&amp;(s.<span class="property">openUrl</span>=a),c&amp;&amp;(s.<span class="property">mediaUrl</span>=c),<span class="string">&quot;&#123;&#125;&quot;</span>===<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(s)?$notification.<span class="title function_">post</span>(e,t,l):$notification.<span class="title function_">post</span>(e,t,l,s)&#125;<span class="keyword">if</span>(o||u)&#123;<span class="keyword">const</span> s=l+(a?<span class="string">`\n点击跳转: <span class="subst">$&#123;a&#125;</span>`</span>:<span class="string">&quot;&quot;</span>)+(c?<span class="string">`\n多媒体: <span class="subst">$&#123;c&#125;</span>`</span>:<span class="string">&quot;&quot;</span>);<span class="keyword">if</span>(r)&#123;<span class="built_in">require</span>(<span class="string">&quot;push&quot;</span>).<span class="title function_">schedule</span>(&#123;<span class="attr">title</span>:e,<span class="attr">body</span>:(t?t+<span class="string">&quot;\n&quot;</span>:<span class="string">&quot;&quot;</span>)+s&#125;)&#125;<span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;e&#125;</span>\n<span class="subst">$&#123;t&#125;</span>\n<span class="subst">$&#123;s&#125;</span>\n\n`</span>)&#125;&#125;<span class="title function_">log</span>(<span class="params">e</span>)&#123;<span class="variable language_">this</span>.<span class="property">debug</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>] LOG: <span class="subst">$&#123;<span class="variable language_">this</span>.stringify(e)&#125;</span>`</span>)&#125;<span class="title function_">info</span>(<span class="params">e</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>] INFO: <span class="subst">$&#123;<span class="variable language_">this</span>.stringify(e)&#125;</span>`</span>)&#125;<span class="title function_">error</span>(<span class="params">e</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>] ERROR: <span class="subst">$&#123;<span class="variable language_">this</span>.stringify(e)&#125;</span>`</span>)&#125;<span class="title function_">wait</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">t</span>=&gt;</span><span class="built_in">setTimeout</span>(t,e))&#125;<span class="title function_">done</span>(<span class="params">e=&#123;&#125;</span>)&#123;s||i||n?$done(e):o&amp;&amp;!r&amp;&amp;<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> $context&amp;&amp;($context.<span class="property">headers</span>=e.<span class="property">headers</span>,$context.<span class="property">statusCode</span>=e.<span class="property">statusCode</span>,$context.<span class="property">body</span>=e.<span class="property">body</span>)&#125;<span class="title function_">stringify</span>(<span class="params">e</span>)&#123;<span class="keyword">if</span>(<span class="string">&quot;string&quot;</span>==<span class="keyword">typeof</span> e||e <span class="keyword">instanceof</span> <span class="title class_">String</span>)<span class="keyword">return</span> e;<span class="keyword">try</span>&#123;<span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(e,<span class="literal">null</span>,<span class="number">2</span>)&#125;<span class="keyword">catch</span>(e)&#123;<span class="keyword">return</span><span class="string">&quot;[object Object]&quot;</span>&#125;&#125;&#125;(e,t)&#125;</span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br></pre></td></tr></table></figure></div>

<h3 id="4-配置Quantumult-X"><a href="#4-配置Quantumult-X" class="headerlink" title="4.配置Quantumult X"></a>4.配置Quantumult X</h3><h4 id="4-1-配置重写"><a href="#4-1-配置重写" class="headerlink" title="4.1 配置重写"></a>4.1 配置重写</h4><blockquote>
<p>将以下代码填写到[rewrite_local]区域</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">^https:\/\/mole-mmp-scrm\.jiajiayue\.com\/boss\/boss\/signin\/record\/list url script-request-header https://raw.githubusercontent.com/tidik/quanx/master/script/jjy.js</span><br></pre></td></tr></table></figure></div>

<h4 id="4-2-配置定时任务"><a href="#4-2-配置定时任务" class="headerlink" title="4.2 配置定时任务"></a>4.2 配置定时任务</h4><blockquote>
<p>将以下代码填写到[task_local]区域</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">30 8 * * * https://raw.githubusercontent.com/tidik/quanx/master/script/jjy.js, tag=家家悦签到,enabled=true</span><br></pre></td></tr></table></figure></div>

<h4 id="4-3-配置MITM"><a href="#4-3-配置MITM" class="headerlink" title="4.3 配置MITM"></a>4.3 配置MITM</h4><blockquote>
<p>将以下代码填写到[MITM]区域</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname = mole-mmp-scrm.jiajiayue.com</span><br></pre></td></tr></table></figure></div>

<p>到这一步，配置完以上内容后就可以打开MITM和重写选项，再到对应签到界面就能自动抓取token等相关参数，然后执行定时任务了。</p>
]]></content>
      <tags>
        <tag>QuantumultX,JS</tag>
      </tags>
  </entry>
  <entry>
    <title>简单分享OpenResty下的443端口共用方案</title>
    <url>/2024/11/10/00356b776dfa.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在某些特殊场景下（比如，流邦卡定向免流），需要用到443（SSL&#x2F;TLS）端口，A服务需要用到，B服务也要用到，但是操作系统内同一时刻只允许一个程序来监听同一个端口。所以本文基于<code>Debian 12</code> 系统来分享一下443端口的共用方案。</p>
<h3 id="首先安装OpenResty"><a href="#首先安装OpenResty" class="headerlink" title="首先安装OpenResty"></a>首先安装OpenResty</h3><ul>
<li>安装必要的依赖</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y curl gnupg2 ca-certificates lsb-release</span><br></pre></td></tr></table></figure></div>

<ul>
<li>添加 OpenResty 官方仓库</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://openresty.org/package/pubkey.gpg | <span class="built_in">sudo</span> gpg --dearmor -o /usr/share/keyrings/openresty-archive-keyring.gpg</span><br></pre></td></tr></table></figure></div>

<ul>
<li>添加 OpenResty 的仓库到 APT 源列表</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [signed-by=/usr/share/keyrings/openresty-archive-keyring.gpg] http://openresty.org/package/debian <span class="subst">$(lsb_release -sc)</span> openresty&quot;</span> | <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/openresty.list</span><br></pre></td></tr></table></figure></div>

<ul>
<li>安装 OpenResty</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y openresty</span><br></pre></td></tr></table></figure></div>

<ul>
<li>启动和配置 OpenResty</li>
</ul>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start openresty</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> openresty</span><br></pre></td></tr></table></figure></div>

<h3 id="添加-stream模块"><a href="#添加-stream模块" class="headerlink" title="添加 stream模块"></a>添加 <code>stream</code>模块</h3><p>编辑 <code>/etc/openresty/nginx.conf</code> 文件，添加 <code>stream</code> 模块。</p>
<blockquote>
<p>注意：stream模块和http模块应是平级关系。</p>
</blockquote>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line">    stream &#123;</span><br><span class="line">        map $ssl_preread_server_name $backend_name &#123;</span><br><span class="line">            a.example.com Server_A<span class="comment">;</span></span><br><span class="line">            b.example.com Server_B<span class="comment">;</span></span><br><span class="line">            default web<span class="comment">;  #默认情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># web 后端服务</span></span><br><span class="line">        upstream web &#123;</span><br><span class="line">            server 【ip】:【port】<span class="comment">; </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># Server_B 后端服务</span></span><br><span class="line">        upstream Server_B &#123;</span><br><span class="line">            server 【ip】:【port】<span class="comment">; </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># Server_A 后端服务</span></span><br><span class="line">        upstream Server_A&#123;</span><br><span class="line">            server 【ip】:【port】<span class="comment">; </span></span><br><span class="line">        &#125;</span><br><span class="line">        server &#123;</span><br><span class="line">            listen 443 <span class="comment">; </span></span><br><span class="line">            listen <span class="section">[::]</span>:443<span class="comment">; </span></span><br><span class="line">            proxy_pass $backend_name<span class="comment">; </span></span><br><span class="line">            ssl_preread on<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="端口复用的原理"><a href="#端口复用的原理" class="headerlink" title="端口复用的原理"></a>端口复用的原理</h4><p>说到这里，就简单的说一下原理了。<code>stream</code> 模块是 OpenResty 提供的专门用来处理 TCP&#x2F;UDP 协议的模块，通过 <code>proxy_pass</code> 指令转发请求到对应的 <code>upstream</code> 模块即可。而 <code>map</code> 指令则是用来定义一个映射关系的，通过 <code>map</code> 指令，我们可以将一个变量映射到另一个变量，从而实现端口复用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411102119223.jpg"
                     
                ></p>
<h4 id="分享一个流邦定向免流方案"><a href="#分享一个流邦定向免流方案" class="headerlink" title="分享一个流邦定向免流方案"></a>分享一个流邦定向免流方案</h4><p>我用的是Trojan协议进行流量转发，Trojan协议是使用TLS加密的，且流邦免流需要用到443端口，而网站https也需要用到443，刚好符合OpenResty挡在前面来分流。混淆用的抖音系列host <code>p26.douyinpic.com</code>。<code>自签证书</code>和<code>trojan搭建</code>这里不再赘述。</p>
<h4 id="OpenResty-配置"><a href="#OpenResty-配置" class="headerlink" title="OpenResty 配置"></a>OpenResty 配置</h4><blockquote>
<p>tips: 如果原本https监听端口为443，需要修改为8443端口</p>
</blockquote>
<div class="code-container" data-rel="Ini"><figure class="iseeu highlight ini"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">   <span class="comment">#保持默认</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    map $ssl_preread_server_name $backend_name &#123;</span><br><span class="line">        p26.douyinpic.com trojan<span class="comment">;</span></span><br><span class="line">        default web<span class="comment">; </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># web 后端服务</span></span><br><span class="line">    upstream web &#123;</span><br><span class="line">        server 127.0.0.1:8443<span class="comment">; </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># trajon 后端服务</span></span><br><span class="line">    upstream trojan&#123;</span><br><span class="line">        server 127.0.0.1:8083<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 443 <span class="comment">; </span></span><br><span class="line">        listen <span class="section">[::]</span>:443 <span class="comment">; </span></span><br><span class="line">        proxy_pass $backend_name<span class="comment">; </span></span><br><span class="line">        ssl_preread on<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    <span class="comment"># 保持默认即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>OpenResty的stream模块是工作在 OSI模型的(四层)传输层，而http模块是工作在(七层)应用层。恰巧trojan是基于TCP传输，所以可以通过这种方法来实现443端口的复用。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411102140104.png"
                     
                ></p>
]]></content>
      <tags>
        <tag>OpenResty</tag>
      </tags>
  </entry>
  <entry>
    <title>基于内网部署GPT-SoVITS服务API调用文档</title>
    <url>/2024/10/19/67173d9409cf.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文档是API调用文档，以便查阅方便并不是部署搭建教程。</p>
<h3 id="客户端API调用"><a href="#客户端API调用" class="headerlink" title="客户端API调用"></a>客户端API调用</h3><blockquote>
<p>以下所有请求HOST均为下列内网，GET形式请按标准规定来拼接URL</p>
</blockquote>
<ul>
<li><a class="link"   href="http://192.168.102.5:9880/" >http://192.168.102.5:9880/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h4 id="使用执行参数指定的参考音频"><a href="#使用执行参数指定的参考音频" class="headerlink" title="使用执行参数指定的参考音频"></a>使用执行参数指定的参考音频</h4><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>需要转语音文本</td>
</tr>
<tr>
<td>text_language</td>
<td>目标语言</td>
</tr>
</tbody></table>
<h6 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h6><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">text=天姥连天向天横，势拔五岳掩赤城。&amp;text_language=zh</span><br></pre></td></tr></table></figure></div>
<h6 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h6><div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;天姥连天向天横，势拔五岳掩赤城。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text_language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<h4 id="使用执行参数指定的参考音频并设定分割符号"><a href="#使用执行参数指定的参考音频并设定分割符号" class="headerlink" title="使用执行参数指定的参考音频并设定分割符号"></a>使用执行参数指定的参考音频并设定分割符号</h4><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>需要转语音文本</td>
</tr>
<tr>
<td>text_language</td>
<td>目标语言</td>
</tr>
<tr>
<td>cut_punc</td>
<td>分割字符</td>
</tr>
</tbody></table>
<h4 id="GET-1"><a href="#GET-1" class="headerlink" title="GET"></a>GET</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">text=天姥连天向天横，势拔五岳掩赤城。&amp;text_language=zh&amp;cut_punc=，。</span><br></pre></td></tr></table></figure></div>
<h6 id="POST-1"><a href="#POST-1" class="headerlink" title="POST"></a>POST</h6><div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;天姥连天向天横，势拔五岳掩赤城。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text_language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cut_punc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;，。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h4 id="手动指定当次推理所使用的参考音频"><a href="#手动指定当次推理所使用的参考音频" class="headerlink" title="手动指定当次推理所使用的参考音频"></a>手动指定当次推理所使用的参考音频</h4><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>需要转语音文本</td>
</tr>
<tr>
<td>text_language</td>
<td>目标语言</td>
</tr>
<tr>
<td>cut_punc</td>
<td>分割字符</td>
</tr>
<tr>
<td>refer_wav_path</td>
<td>参考音频</td>
</tr>
<tr>
<td>prompt_text</td>
<td>音频对应文本</td>
</tr>
<tr>
<td>prompt_language</td>
<td>音频对应语言</td>
</tr>
</tbody></table>
<h6 id="GET-2"><a href="#GET-2" class="headerlink" title="GET"></a>GET</h6><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">refer_wav_path=123.wav&amp;prompt_text=一二三。&amp;prompt_language=zh&amp;text=天姥连天向天横，势拔五岳掩赤城。&amp;text_language=zh&amp;cut_punc=，。</span><br></pre></td></tr></table></figure></div>
<h6 id="POST-2"><a href="#POST-2" class="headerlink" title="POST"></a>POST</h6><div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;refer_wav_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123.wav&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prompt_text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一二三。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prompt_language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;天姥连天向天横，势拔五岳掩赤城。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text_language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cut_punc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;，。&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>成功: 直接返回 wav 音频流， http code 200</li>
<li>失败: 返回包含错误信息的 json, http code 400</li>
</ul>
<h4 id="手动指定当次推理所使用的参考音频，并提供参数"><a href="#手动指定当次推理所使用的参考音频，并提供参数" class="headerlink" title="手动指定当次推理所使用的参考音频，并提供参数"></a>手动指定当次推理所使用的参考音频，并提供参数</h4><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>text</td>
<td>需要转语音文本</td>
</tr>
<tr>
<td>text_language</td>
<td>目标语言</td>
</tr>
<tr>
<td>cut_punc</td>
<td>分割字符</td>
</tr>
<tr>
<td>refer_wav_path</td>
<td>参考音频</td>
</tr>
<tr>
<td>prompt_text</td>
<td>音频对应文本</td>
</tr>
<tr>
<td>prompt_language</td>
<td>音频对应语言</td>
</tr>
<tr>
<td>top_k</td>
<td>在生成过程中从前 k 个最可能的候选项中进行选择</td>
</tr>
<tr>
<td>top_p</td>
<td>表示选择候选词的累积概率阈值</td>
</tr>
<tr>
<td>temperature</td>
<td>控制生成结果的随机性</td>
</tr>
<tr>
<td>speed</td>
<td>控制播放速度</td>
</tr>
<tr>
<td>inp_refs</td>
<td>音频文件路径的数组</td>
</tr>
</tbody></table>
<h6 id="GET-3"><a href="#GET-3" class="headerlink" title="GET"></a>GET</h6><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">refer_wav_path=123.wav&amp;prompt_text=一二三。&amp;prompt_language=zh&amp;text=天姥连天向天横，势拔五岳掩赤城。&amp;text_language=zh&amp;cut_punc=，。&amp;top_k=20&amp;top_p=0.6&amp;temperature=0.6&amp;speed=1&amp;inp_refs=&quot;456.wav&quot;&amp;inp_refs=&quot;789.wav</span><br></pre></td></tr></table></figure></div>
<h6 id="POST-3"><a href="#POST-3" class="headerlink" title="POST"></a>POST</h6><div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;refer_wav_path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123.wav&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prompt_text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一二三。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prompt_language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;天姥连天向天横，势拔五岳掩赤城。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text_language&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cut_punc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;，。&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;top_k&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;top_p&quot;</span><span class="punctuation">:</span> <span class="number">0.6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;speed&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;inp_refs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;456.wav&quot;</span><span class="punctuation">,</span><span class="string">&quot;789.wav&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>成功: 直接返回 wav 音频流， http code 200</li>
<li>失败: 返回包含错误信息的 json, http code 400</li>
</ul>
<h4 id="简单的Axios调用示例"><a href="#简单的Axios调用示例" class="headerlink" title="简单的Axios调用示例"></a>简单的Axios调用示例</h4><blockquote>
<p>需要ffmpeg环境支持，请自行安装</p>
</blockquote>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Speaker</span> = <span class="built_in">require</span>(<span class="string">&#x27;speaker&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ffmpeg = <span class="built_in">require</span>(<span class="string">&#x27;fluent-ffmpeg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Speaker 实例来播放解码后的 PCM 音频流</span></span><br><span class="line"><span class="keyword">const</span> speaker = <span class="keyword">new</span> <span class="title class_">Speaker</span>(&#123;</span><br><span class="line">    <span class="attr">channels</span>: <span class="number">2</span>,          <span class="comment">// 立体声</span></span><br><span class="line">    <span class="attr">bitDepth</span>: <span class="number">16</span>,         <span class="comment">// 16 位</span></span><br><span class="line">    <span class="attr">sampleRate</span>: <span class="number">44100</span>     <span class="comment">// 44.1kHz 采样率</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求流式音频并处理的函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">streamOggAudio</span> = <span class="keyword">async</span> (<span class="params">url</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: url,</span><br><span class="line">            <span class="attr">responseType</span>: <span class="string">&#x27;stream&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始ffmpeg流式转换格式，OGG-&gt;PCM&quot;</span>)</span><br><span class="line">        <span class="comment">// 使用 FFmpeg 转换 OGG 流并播放</span></span><br><span class="line">        <span class="title function_">ffmpeg</span>(response.<span class="property">data</span>)</span><br><span class="line">            .<span class="title function_">format</span>(<span class="string">&#x27;s16le&#x27;</span>) <span class="comment">// 指定输出格式为 PCM</span></span><br><span class="line">            .<span class="title function_">audioChannels</span>(<span class="number">2</span>) <span class="comment">// 设置为立体声</span></span><br><span class="line">            .<span class="title function_">audioFrequency</span>(<span class="number">44100</span>) <span class="comment">// 设置采样率为 44.1kHz</span></span><br><span class="line">            .<span class="title function_">pipe</span>(speaker, &#123; <span class="attr">end</span>: <span class="literal">true</span> &#125;) <span class="comment">// 将转换后的音频流传递给 Speaker</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error streaming audio:&#x27;</span>, error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> text = <span class="string">`先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。`</span></span><br><span class="line"><span class="keyword">const</span> audioUrl = <span class="string">`http://192.168.102.5:9880?text=<span class="subst">$&#123;text&#125;</span>&amp;text_language=zh`</span>;</span><br><span class="line">!(<span class="title function_">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">streamOggAudio</span>(audioUrl);</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="api-py-启动参数列表"><a href="#api-py-启动参数列表" class="headerlink" title="api.py 启动参数列表"></a>api.py 启动参数列表</h4><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
<th>可选值</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>-s</td>
<td>SoVITS模型路径</td>
<td>依据实际需求</td>
<td>config.py中指定</td>
</tr>
<tr>
<td>-g</td>
<td>GPT模型路径</td>
<td>依据实际需求</td>
<td>config.py中指定</td>
</tr>
<tr>
<td>-dr</td>
<td>默认参考音频路径</td>
<td>依据实际需求</td>
<td>-dr “wavs&#x2F;1.wav”</td>
</tr>
<tr>
<td>-dt</td>
<td>默认参考音频文本</td>
<td>依据实际需求</td>
<td>-dt “你好，我是大白”</td>
</tr>
<tr>
<td>-dl</td>
<td>默认参考音频语种</td>
<td>“zh”,”en”,”ja”,”ko”,”yue”</td>
<td>-dl “zh”</td>
</tr>
<tr>
<td>-d</td>
<td>推理设备</td>
<td>“cuda”,”cpu”</td>
<td>-d “cpu”</td>
</tr>
<tr>
<td>-a</td>
<td>监听地址</td>
<td>依据实际需求</td>
<td>-a “0.0.0.0”</td>
</tr>
<tr>
<td>-p</td>
<td>监听端口</td>
<td>依据实际需求</td>
<td>-p 9880</td>
</tr>
<tr>
<td>-fp</td>
<td>覆盖 config.py 使用全精度</td>
<td>依据实际需求</td>
<td></td>
</tr>
<tr>
<td>-hp</td>
<td>覆盖 config.py 使用半精度</td>
<td>依据实际需求</td>
<td></td>
</tr>
<tr>
<td>-sm</td>
<td>式返回模式, 默认不启用</td>
<td>“c”,”n”</td>
<td>-sm “n”</td>
</tr>
<tr>
<td>-mt</td>
<td>返回的音频编码格式, 流式默认ogg, 非流式默认wav</td>
<td>“wav”, “ogg”, “aac”</td>
<td>-mt “ogg”</td>
</tr>
<tr>
<td>-st</td>
<td>返回的音频数据类型, 默认int16</td>
<td>“int16”, “int32”</td>
<td>-st “int32”</td>
</tr>
<tr>
<td>-cp</td>
<td>文本切分符号设定, 默认为空</td>
<td>“,.，。”</td>
<td>-cp “,.，。”</td>
</tr>
<tr>
<td>-hb</td>
<td>cnhubert路径</td>
<td>依据实际需求</td>
<td></td>
</tr>
<tr>
<td>-b</td>
<td>bert路径</td>
<td>依据实际需求</td>
<td></td>
</tr>
</tbody></table>
<h3 id="运行前准备"><a href="#运行前准备" class="headerlink" title="运行前准备"></a>运行前准备</h3><h4 id="debian-ubuntu-安装screen"><a href="#debian-ubuntu-安装screen" class="headerlink" title="debian&#x2F;ubuntu 安装screen"></a>debian&#x2F;ubuntu 安装screen</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install screen -y</span><br></pre></td></tr></table></figure></div>
<h4 id="新建screen"><a href="#新建screen" class="headerlink" title="新建screen"></a>新建screen</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">screen -S GPTSoVits</span><br></pre></td></tr></table></figure></div>
<h4 id="激活conda环境"><a href="#激活conda环境" class="headerlink" title="激活conda环境"></a>激活conda环境</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">conda activate GPTSoVits</span><br></pre></td></tr></table></figure></div>
<h4 id="服务端启动示例"><a href="#服务端启动示例" class="headerlink" title="服务端启动示例"></a>服务端启动示例</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">python api.py -dr &quot;wavs/1.wav&quot; -dt &quot;大家也叫我三月、小三月…你呢？你想叫我什么？&quot; -dl &quot;zh&quot; -d &quot;cpu&quot; -a &quot;0.0.0.0&quot; -p 9880 -sm &quot;n&quot; -cp &quot;,.，。&quot;</span><br></pre></td></tr></table></figure></div>
<h4 id="保存screen会话"><a href="#保存screen会话" class="headerlink" title="保存screen会话"></a>保存screen会话</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl+a+d</span><br></pre></td></tr></table></figure></div>
<h4 id="查看监听端口信息"><a href="#查看监听端口信息" class="headerlink" title="查看监听端口信息"></a>查看监听端口信息</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 9880</span><br></pre></td></tr></table></figure></div>
<h4 id="开放防火墙端口"><a href="#开放防火墙端口" class="headerlink" title="开放防火墙端口"></a>开放防火墙端口</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 9880</span><br></pre></td></tr></table></figure></div>]]></content>
      <tags>
        <tag>GPT-SoVIIS</tag>
      </tags>
  </entry>
  <entry>
    <title>基于DNS解析分流实现CDN国内外加速与防御</title>
    <url>/2024/04/02/a5caa24dd309.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>由于众所周知的原因，网站部署在境内服务器上，境外用户访问总会出一些奇奇怪怪的原因。再者，绝大多数对服务器的恶意攻击都来自境外IP，为了实现网站防护，同时提升国内外用户体验感，特以此文记录，以备后续参考。</p>
<h3 id="整体流程"><a href="#整体流程" class="headerlink" title="#整体流程"></a>#整体流程</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/3780368673.png"
                      alt="Snipaste_2024-04-02_16-58-39.png"
                ></p>
<h3 id="1-关于CDN"><a href="#1-关于CDN" class="headerlink" title="1. 关于CDN"></a>1. 关于CDN</h3><h4 id="1-1-什么是CDN"><a href="#1-1-什么是CDN" class="headerlink" title="1.1 什么是CDN"></a>1.1 什么是CDN</h4><p>内容分发网络（CDN）是一个互连服务器网络，可加快数据密集型应用程序的网页加载速度。CDN 可以表示内容分发网络或内容分配网络。当用户访问某个网站时，来自该网站服务器的数据必须通过互联网传输到用户的计算机。如果用户距离该服务器较远，则加载大文件（例如视频或网站图像）将需要很长时间。相反，如果网站内容存储在距离用户较近的 CDN 服务器上，就可以更快到达他们的计算机。</p>
<h4 id="1-2-为什么CDN很重要"><a href="#1-2-为什么CDN很重要" class="headerlink" title="1.2 为什么CDN很重要"></a>1.2 为什么CDN很重要</h4><p>内容分发网络（CDN）的主要目的是减少延迟，或减少由网络设计造成的通信延迟。由于互联网的全球性和复杂性，网站（服务器）与其用户（客户端）之间的通信流量必须跨越很长的物理距离。通信也是双向的，从客户端向服务器发送请求，服务器返回响应。CDN 通过在客户端和网站服务器之间引入中间服务器来提高效率。这些 CDN 服务器将管理客户端与服务器之间的一些通信。它们可以降低传送到 Web 服务器的 Web 流量、减少带宽消耗，并改善应用程序的用户体验。</p>
<h4 id="1-3-CDN的优势有哪些"><a href="#1-3-CDN的优势有哪些" class="headerlink" title="1.3 CDN的优势有哪些"></a>1.3 CDN的优势有哪些</h4><blockquote>
<p>内容分发网络（CDN）具有众多优势，可以提高网站性能并支持核心网络基础设施。</p>
</blockquote>
<p>**加快页面加载速度 **</p>
<p>如果您的页面加载速度太慢，网站流量可能会减少。CDN 可以降低跳出率并增加用户在您网站上停留的时间。</p>
<p><strong>降低带宽成本</strong></p>
<p>带宽成本是一笔巨大的开支，因为每个传入的网站请求都会消耗网络带宽。通过缓存和其他优化，CDN 可以减少原始服务器必须提供的数据量，从而降低网站所有者的托管成本。</p>
<p><strong>提高内容可用性</strong></p>
<p>同一时间的访客过多或网络硬件故障可能会导致网站崩溃。CDN 服务可以处理更多 Web 流量并降低 Web 服务器的负载。此外，如果一台或多台 CDN 服务器离线，其他运营服务器可以替换它们，以确保服务不中断。</p>
<p><strong>提高网站安全性</strong></p>
<p>分布式拒绝服务（DDoS）攻击试图通过向网站发送大量虚假流量来关闭应用程序。CDN 可以通过在多个中间服务器之间分配负载来处理此类流量峰值，从而降低对原始服务器的影响。</p>
<h4 id="1-4-常见CDN提供商"><a href="#1-4-常见CDN提供商" class="headerlink" title="1.4 常见CDN提供商"></a>1.4 常见CDN提供商</h4><p><strong>国内</strong></p>
<p>阿里云、腾讯云、又拍云、七牛云等等</p>
<p><strong>国外</strong></p>
<p>CloudFlare（以下简称CF）等等</p>
<p><strong>tips:</strong></p>
<blockquote>
<p>笔者用的<strong>又拍云</strong>（云联盟免费）+ <strong>CloudFlare</strong>（个人用户免费）</p>
</blockquote>
<h3 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2. 前期准备"></a>2. 前期准备</h3><ul>
<li><strong>域名</strong></li>
</ul>
<p>域名需要准备两个，一个备案，一个不备案。</p>
<ul>
<li><strong>云服务器</strong></li>
</ul>
<p>搭建必须的运行环境并部署网站。</p>
<ul>
<li><strong>域名解析管理</strong></li>
</ul>
<p>负责域名的解析（笔者用的阿里万网DNS解析）</p>
<ul>
<li><strong>CloudFlare账号</strong></li>
</ul>
<p>将未备案的域名添加到CF并解析。</p>
<h3 id="3-配置国内CDN"><a href="#3-配置国内CDN" class="headerlink" title="3. 配置国内CDN"></a>3. 配置国内CDN</h3><h4 id="3-1-创建CDN服务"><a href="#3-1-创建CDN服务" class="headerlink" title="3.1 创建CDN服务"></a>3.1 创建CDN服务</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/3765866439.png"
                      alt="Snipaste_2024-04-02_14-52-41.png"
                ></p>
<h4 id="3-2-将域名解析到CDN"><a href="#3-2-将域名解析到CDN" class="headerlink" title="3.2 将域名解析到CDN"></a>3.2 将域名解析到CDN</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/4020552366.png"
                      alt="Snipaste_2024-04-02_14-57-21.png"
                ></p>
<h4 id="3-3-配置HTTPS"><a href="#3-3-配置HTTPS" class="headerlink" title="3.3 配置HTTPS"></a>3.3 配置HTTPS</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/544052555.png"
                      alt="Snipaste_2024-04-02_15-00-52.png"
                ></p>
<h4 id="3-4-检测配置结果"><a href="#3-4-检测配置结果" class="headerlink" title="3.4 检测配置结果"></a>3.4 检测配置结果</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/2369516591.png"
                      alt="Snipaste_2024-04-02_15-04-40.png"
                ></p>
<h3 id="4-配置国外CDN"><a href="#4-配置国外CDN" class="headerlink" title="4. 配置国外CDN"></a>4. 配置国外CDN</h3><h4 id="4-1-解析未备案域名到CF"><a href="#4-1-解析未备案域名到CF" class="headerlink" title="4.1 解析未备案域名到CF"></a>4.1 解析未备案域名到CF</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/3705857194.png"
                      alt="Snipaste_2024-04-02_15-10-12.png"
                ></p>
<h4 id="4-2-配置DNS解析"><a href="#4-2-配置DNS解析" class="headerlink" title="4.2 配置DNS解析"></a>4.2 配置DNS解析</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/1298590996.png"
                      alt="Snipaste_2024-04-02_15-16-03.png"
                ></p>
<h4 id="4-3-添加自定义主机名"><a href="#4-3-添加自定义主机名" class="headerlink" title="4.3 添加自定义主机名"></a>4.3 添加自定义主机名</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/1921466730.png"
                      alt="Snipaste_2024-04-02_15-24-08.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/1192126118.png"
                      alt="Snipaste_2024-04-02_15-26-10.png"
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/1682049828.png"
                      alt="Snipaste_2024-04-02_15-30-32.png"
                ></p>
<h4 id="4-4-配置SSL相关选项"><a href="#4-4-配置SSL相关选项" class="headerlink" title="4.4 配置SSL相关选项"></a>4.4 配置SSL相关选项</h4><p>这一部分，需要根据自己的需求来选择，笔者这里开启的选项仅供大家参考。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/614848999.png"
                      alt="Snipaste_2024-04-02_15-37-28.png"
                ></p>
<h3 id="5-配置分流"><a href="#5-配置分流" class="headerlink" title="5. 配置分流"></a>5. 配置分流</h3><h4 id="5-1-配置DNS"><a href="#5-1-配置DNS" class="headerlink" title="5.1 配置DNS"></a>5.1 配置DNS</h4><p>tips：</p>
<blockquote>
<p>笔者使用的阿里万网来解析的DNS记录</p>
</blockquote>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/582320550.png"
                      alt="Snipaste_2024-04-02_16-30-38.png"
                ></p>
<h4 id="5-2-检测是否生效"><a href="#5-2-检测是否生效" class="headerlink" title="5.2 检测是否生效"></a>5.2 检测是否生效</h4><p>笔者分别使用国内和国外服务器进行dns记录解析查看分流是否生效</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">nslookup blog.inik.cc</span><br></pre></td></tr></table></figure></div>

<p>Tips:</p>
<blockquote>
<p>yum -y install bind-utils (如果以上命令报错请先安装必要的工具「Centos下」)</p>
</blockquote>
<p>国内：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/650752115.png"
                      alt="Snipaste_2024-04-02_16-39-41.png"
                ></p>
<p>国外：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/3522988742.png"
                      alt="Snipaste_2024-04-02_16-40-16.png"
                ></p>
<p>从上面的记录可以看到，分流已经生效了，境内来源的IP会被调度到又拍云CDN上，境外来源IP会被调度到CloudFlare上。</p>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>至此我们的网站就接入完成了，实现了国内外双加速。</p>
]]></content>
      <tags>
        <tag>CDN Cloudflare</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建基于PicGO+Github的图床并配置国内加速</title>
    <url>/2024/11/07/b51ef04e4811.html</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>众所周知，用Github做图床的好处就是数据可以实现永久化存储且目前容量无限制，不过也有一个很明显的缺点就是在国内访问速度非常非常非常慢，而且经常被墙。本文将提供一个基于PicGo+Github的图床搭建方案，并应用 <code>赛博菩萨</code>（Cloudfalre CDN加速）同时配置国内外加速，以解决国内访问速度慢的问题。</p>
<h3 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h3><ul>
<li>一个PicGo客户端</li>
<li>一个Github账号</li>
<li>一个Cloudflare账号</li>
<li>一个A域名（备案与否都不影响）(我的A域名是<code>sbsbsbs.sbs</code>)</li>
<li>一个B域名（备案与否都不影响）(我的B域名是<code>cdn.inik.cc</code>)</li>
</ul>
<h2 id="设置Github"><a href="#设置Github" class="headerlink" title="设置Github"></a>设置Github</h2><p>在Github上新建一个仓库，仓库名随意，比如<code>picgo</code>，然后把仓库设置为公开。并创建一个用于PicGO和Github通信的Token，将图片推送到GitHub。</p>
<blockquote>
<p>注意：仓库权限必须为公开，不然会出现引用链接无法访问的情况。</p>
</blockquote>
<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071409502.jpg"
                     
                ></p>
<h3 id="设置Token并分配权限"><a href="#设置Token并分配权限" class="headerlink" title="设置Token并分配权限"></a>设置Token并分配权限</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071415521.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071418036.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071418034.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071419978.jpg"
                     
                ></p>
<h2 id="PicGO设置"><a href="#PicGO设置" class="headerlink" title="PicGO设置"></a>PicGO设置</h2><h3 id="安装PicGo"><a href="#安装PicGo" class="headerlink" title="安装PicGo"></a>安装PicGo</h3><p>下载对应的客户端并安装，我这里使用的是 macOS 版。<br>下载地址：<a class="link"   href="https://github.com/Molunerfinn/PicGo/releases" >点击下载PicGo客户端<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071424202.jpg"
                     
                ></p>
<h3 id="设置Github-1"><a href="#设置Github-1" class="headerlink" title="设置Github"></a>设置Github</h3><p>在设置中填写我们刚才创建的仓库信息，并填写刚才创建的Token。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071429076.jpg"
                     
                ></p>
<p>设置完成后，点击<code>确定</code>，然后点击<code>上传区</code>，上传一张图片，如果上传成功，说明配置成功。</p>
<p>此时刷新GitHub页面可以看到推送的图片。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071436727.jpg"
                     
                ></p>
<h2 id="Cloudflare设置"><a href="#Cloudflare设置" class="headerlink" title="Cloudflare设置"></a>Cloudflare设置</h2><h3 id="将A域名解析到Cloudflare"><a href="#将A域名解析到Cloudflare" class="headerlink" title="将A域名解析到Cloudflare"></a>将A域名解析到Cloudflare</h3><p>这一步就省略了，如果你没使用过Cloudflare，请看这一片博客<a href="https://blog.inik.cc/2024/04/02/a5caa24dd309.html">基于DNS解析分流实现CDN国内外加速与防御</a>的域名解析到Cloudflare部分。</p>
<h3 id="添加一条A域名的解析记录"><a href="#添加一条A域名的解析记录" class="headerlink" title="添加一条A域名的解析记录"></a>添加一条A域名的解析记录</h3><p>当作<code>回退源</code>用于接入CNAME解析的B域名</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071453643.jpg"
                     
                ></p>
<h3 id="将B域名以CNAME方式解析到Cloudflare"><a href="#将B域名以CNAME方式解析到Cloudflare" class="headerlink" title="将B域名以CNAME方式解析到Cloudflare"></a>将B域名以CNAME方式解析到Cloudflare</h3><p>添加自定义主机名（B域名）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071443492.jpg"
                     
                ></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071446489.jpg"
                     
                ></p>
<p>在B域名的DNS记录中添加如下TXT解析记录，添加后，刷新。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071447032.jpg"
                     
                ></p>
<p>接入成功的状态应是下图所示。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071457466.jpg"
                     
                ></p>
<p>至此，我们已经完成A域名和B域名在Cloudflare上的配置。</p>
<h3 id="设置重定向规则完成国内外分流"><a href="#设置重定向规则完成国内外分流" class="headerlink" title="设置重定向规则完成国内外分流"></a>设置重定向规则完成国内外分流</h3><p>创建第一条分流规则，添加国内分流重定向</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071504186.jpg"
                     
                ></p>
<ul>
<li>国内分流重定向表达式预览<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(http.host eq &quot;cdn.inik.cc&quot; and ip.geoip.country eq &quot;CN&quot;)</span><br></pre></td></tr></table></figure></div></li>
<li>国内分流URL重定向 表达式<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(&quot;https://jsd.cdn.zzko.cn&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<p>创建第二条分流规则，添加国际分流重定向</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071507715.jpg"
                     
                ></p>
<ul>
<li>国际分流重定向表达式预览<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(http.host eq &quot;cdn.inik.cc&quot; and ip.geoip.country ne &quot;CN&quot;)</span><br></pre></td></tr></table></figure></div></li>
<li>国际分流URL重定向 表达式<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(&quot;https://cdn.jsdelivr.net&quot;, http.request.uri.path)</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="B域名解析设置"><a href="#B域名解析设置" class="headerlink" title="B域名解析设置"></a>B域名解析设置</h2><p>上面我们完成了 Github 和 Cloudflare 的配置，接下来我们需要在 B 域名的DNS解析上做一下设置，来实现DNS解析的国内外分流。</p>
<blockquote>
<p>tips: 这里我使用的阿里云DNS解析</p>
</blockquote>
<p>添加一条A解析记录，并指定 解析请求来源<code>境外</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071524930.jpg"
                     
                ></p>
<p>添加一条CNAME解析记录，并指定 解析请求来源<code>境内</code></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071526338.jpg"
                     
                ></p>
<ul>
<li><p>你可能会好奇 为什么境内解析的CNAME解析记录要指向 <code>visa.cn</code>呢？</p>
</li>
<li><p>这是因为 <code>visa.cn</code> 是一个Cloudflare CDN 反向代理的入口（因为 <code>visa</code>的服务接入Cloudflare来提供安全和攻击防御）， 众所周知的原因，<code>visa.cn</code>在境内有专属的特权来过境。所以我直接在<code>visa.cn</code>接入，让它帮我们把流量转发转发到Cloudflare，比我们直连要快很多很多。🐶</p>
</li>
</ul>
<h2 id="临门一脚"><a href="#临门一脚" class="headerlink" title="临门一脚"></a>临门一脚</h2><p>还记得第二步我们配置的PicGO客户端吗？到此我们已经把需要用的域名都配置完了，接下来我们还需在PicGO中设置我们的自定义链接。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071535646.jpg"
                     
                ></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.inik.cc/gh/tidik/images</span><br></pre></td></tr></table></figure></div>

<p>到这一步我们完成了所有的配置，接下来我们在上传图片测试返回的url链接应该如下：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.inik.cc/gh/tidik/images/202411071535646.jpg</span><br></pre></td></tr></table></figure></div>

<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>补充一个整体加速流程图吧（算是吧🐶）</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411071539149.jpg"
                     
                ></p>
]]></content>
      <tags>
        <tag>Github PicGO</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现三大经典排序算法</title>
    <url>/2024/11/25/ddf9aae97ac9.html</url>
    <content><![CDATA[<h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>最近又开始review一下JavaSE的知识，才发现之前学的三大经典排序算法–冒泡排序、选择排序和插入排序 的实现还是有些许的不足，所以重新实现了一下，顺便也复习一下JavaSE的知识。</p>
<h3 id="0x02-冒泡排序"><a href="#0x02-冒泡排序" class="headerlink" title="0x02 冒泡排序"></a>0x02 冒泡排序</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411251627851.gif"
                     
                ></p>
<h4 id="排序具体步骤："><a href="#排序具体步骤：" class="headerlink" title="排序具体步骤："></a>排序具体步骤：</h4><ul>
<li>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素为最大的数；</li>
<li>针对所有的元素重复以上的步骤，除了最后一个(如果第N轮，则为倒数N个)；</li>
<li>重复以上步骤，直到排序完成。</li>
</ul>
<h4 id="具体流程图："><a href="#具体流程图：" class="headerlink" title="具体流程图："></a>具体流程图：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411251556382.png"
                     
                ></p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>... arr)</span>&#123;</span><br><span class="line">    <span class="type">boolean</span> exchange_flag; <span class="comment">//用于判断是否发生交换</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>;j++)&#123; <span class="comment">//控制第几轮循环</span></span><br><span class="line">        exchange_flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>-j;i++)&#123; <span class="comment">//遍历比较</span></span><br><span class="line">            <span class="comment">//如果前一个比后一个大则互换位置</span></span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//交换两个元素</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">                arr[i+<span class="number">1</span>] = temp;</span><br><span class="line">                exchange_flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果未发生交换则跳出循环</span></span><br><span class="line">        <span class="keyword">if</span>(!exchange_flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="时间复杂度分析："><a href="#时间复杂度分析：" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><ul>
<li>最好情况：如果待排序的数组已经是有序的，那么只需要进行一次遍历，时间复杂度为 O(n)；</li>
<li>最坏情况：如果待排序的数组是逆序的，那么需要n-1轮遍历，每一轮遍历需要比较n-i次，时间复杂度为O(n^2)；</li>
</ul>
<h3 id="0x03-选择排序"><a href="#0x03-选择排序" class="headerlink" title="0x03 选择排序"></a>0x03 选择排序</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411251642780.gif"
                     
                ></p>
<h4 id="排序具体步骤：-1"><a href="#排序具体步骤：-1" class="headerlink" title="排序具体步骤："></a>排序具体步骤：</h4><ul>
<li>从数组的第一个位置开始，认为当前元素是最小值。</li>
<li>在当前元素之后的未排序部分中，逐个比较，寻找最小值。<br>如果找到比当前最小值更小的元素，更新最小值的索引。</li>
<li>将找到的最小值与当前元素交换位置。</li>
<li>移动到下一个位置，重复步骤以上步骤。</li>
</ul>
<h4 id="具体流程图：-1"><a href="#具体流程图：-1" class="headerlink" title="具体流程图："></a>具体流程图：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411251643241.png"
                     
                ></p>
<h4 id="代码实现：-1"><a href="#代码实现：-1" class="headerlink" title="代码实现："></a>代码实现：</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>... arr)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//默认当前为最小的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i; </span><br><span class="line">        <span class="comment">//从i+1，往后找最小的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;arr.length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&lt;arr[minIndex])&#123;</span><br><span class="line">                <span class="comment">//发现更小的则更新最小值索引</span></span><br><span class="line">                minIndex = j; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换最小元素和当前元素</span></span><br><span class="line">        <span class="keyword">if</span>(minIndex!=i)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[minIndex];</span><br><span class="line">            arr[minIndex] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="时间复杂度分析：-1"><a href="#时间复杂度分析：-1" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><ul>
<li>最好情况：O(n^2)；</li>
<li>最坏情况：O(n^2)；</li>
</ul>
<h3 id="0x04-插入排序"><a href="#0x04-插入排序" class="headerlink" title="0x04 插入排序"></a>0x04 插入排序</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411251657233.gif"
                     
                ></p>
<h4 id="排序具体步骤：-2"><a href="#排序具体步骤：-2" class="headerlink" title="排序具体步骤："></a>排序具体步骤：</h4><ul>
<li>初始假设：将第一个元素视为已经排序的部分。<br>从第二个元素开始：</li>
<li>依次取出未排序部分的元素，与已排序部分从后向前比较。<br>找到适当位置后，将该元素插入。</li>
<li>重复步骤 2，直到所有元素都插入完成。</li>
</ul>
<h4 id="具体流程图：-2"><a href="#具体流程图：-2" class="headerlink" title="具体流程图："></a>具体流程图：</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/202411251659383.png"
                     
                ></p>
<h4 id="代码实现：-2"><a href="#代码实现：-2" class="headerlink" title="代码实现："></a>代码实现：</h4><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>... arr)</span>&#123;</span><br><span class="line">    <span class="comment">//从索引1开始，并将索引1视为已经排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="comment">//将当前元素提取出来</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">current</span> <span class="operator">=</span> arr[i]; </span><br><span class="line">        <span class="comment">//指定当前元素的前一个元素的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">preIndex</span> <span class="operator">=</span> i-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//判断当前元素是否小于前一个元素且是否存在下标越界</span></span><br><span class="line">        <span class="keyword">while</span>(preIndex&gt;=<span class="number">0</span> &amp;&amp; arr[preIndex]&gt;current)&#123;</span><br><span class="line">            <span class="comment">//如果当前元素小于前一个，则将前一个元素后移</span></span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex];</span><br><span class="line">            <span class="comment">//指针从后往前移动</span></span><br><span class="line">            preIndex--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前元素比前一个大，则将当前元素插入到前一个元素后面</span></span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="时间复杂度分析：-2"><a href="#时间复杂度分析：-2" class="headerlink" title="时间复杂度分析："></a>时间复杂度分析：</h4><ul>
<li>最好情况（数组已经有序）：每轮只需比较一次，时间复杂度为 O(n^2);</li>
<li>最坏情况（数组逆序）：每轮需要比较并移动所有已排序元素，时间复杂度为 O(n^2)；</li>
<li>平均情况：O(n^2)</li>
</ul>
]]></content>
      <tags>
        <tag>Java 排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS下配置Github &amp; Gitee</title>
    <url>/2025/02/04/ae020f00c94a.html</url>
    <content><![CDATA[<h2 id="0x01-安装Git"><a href="#0x01-安装Git" class="headerlink" title="0x01 安装Git"></a>0x01 安装Git</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></div>
<h2 id="0x02-生成密钥对"><a href="#0x02-生成密钥对" class="headerlink" title="0x02 生成密钥对"></a>0x02 生成密钥对</h2><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span> -f ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure></div>
<h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span> -f ~/.ssh/id_rsa_gitee</span><br></pre></td></tr></table></figure></div>

<h2 id="查看生成公钥"><a href="#查看生成公钥" class="headerlink" title="查看生成公钥"></a>查看生成公钥</h2><h3 id="Github-1"><a href="#Github-1" class="headerlink" title="Github"></a>Github</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa_github.pub</span><br></pre></td></tr></table></figure></div>
<h3 id="Gitee-1"><a href="#Gitee-1" class="headerlink" title="Gitee"></a>Gitee</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa_gitee.pub</span><br></pre></td></tr></table></figure></div>

<h2 id="配置GitHub-Gitee公钥"><a href="#配置GitHub-Gitee公钥" class="headerlink" title="配置GitHub &amp; Gitee公钥"></a>配置GitHub &amp; Gitee公钥</h2><h3 id="Github-2"><a href="#Github-2" class="headerlink" title="Github"></a>Github</h3><ul>
<li>登录到 GitHub，进入 Settings -&gt; SSH and GPG keys -&gt; New SSH key，将公钥粘贴进去并保存。</li>
</ul>
<h3 id="Gitee-2"><a href="#Gitee-2" class="headerlink" title="Gitee"></a>Gitee</h3><ul>
<li>登录到 Gitee，进入 个人设置 -&gt; SSH 公钥 -&gt; 添加公钥，将公钥粘贴进去并保存。</li>
</ul>
<h2 id="配置本地SSH文件"><a href="#配置本地SSH文件" class="headerlink" title="配置本地SSH文件"></a>配置本地SSH文件</h2><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/config</span><br></pre></td></tr></table></figure></div>

<p>添加以下内容</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># GitHub 配置</span></span><br><span class="line">Host github.com</span><br><span class="line"> 	HostName github.com</span><br><span class="line"> 	User git</span><br><span class="line"> 	IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitee 配置</span></span><br><span class="line">Host gitee.com</span><br><span class="line"> 	HostName gitee.com</span><br><span class="line"> 	User git</span><br><span class="line"> 	IdentityFile ~/.ssh/id_rsa_gitee</span><br></pre></td></tr></table></figure></div>

<h2 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h2><h3 id="测试Github连接"><a href="#测试Github连接" class="headerlink" title="测试Github连接"></a>测试Github连接</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>

<p>如果成功将看到以下提示信息</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi 你的用户名! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></div>

<h3 id="测试Gitee连接"><a href="#测试Gitee连接" class="headerlink" title="测试Gitee连接"></a>测试Gitee连接</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure></div>

<p>如果成功将看到以下提示信息</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hi 你的用户名! You&#x27;ve successfully authenticated, but Gitee does not provide shell access.</span><br></pre></td></tr></table></figure></div>

<h2 id="测试仓库克隆"><a href="#测试仓库克隆" class="headerlink" title="测试仓库克隆"></a>测试仓库克隆</h2><h3 id="Github-3"><a href="#Github-3" class="headerlink" title="Github"></a>Github</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:username/repository.git</span><br></pre></td></tr></table></figure></div>

<h3 id="Gitee-3"><a href="#Gitee-3" class="headerlink" title="Gitee"></a>Gitee</h3><div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitee.com:username/repository.git</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://cdn.inik.cc/gh/tidik/images/1*SSRjtoQ0H2X3SBPOiJ5rZw.webp"
                     
                ></p>
]]></content>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
